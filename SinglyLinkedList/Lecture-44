#include <iostream>
using namespace std;

class node
{
public:
    int data;
    node *next;
    node(int i)
    {
        this->data = i;
        this->next = NULL;
    }
    // Destructor for dynamically created object
    ~node()
    {
        int value = this->data;
        cout << "Node with data : " << value << " deleted" << endl;
    }
};
// Head Insertion
void insertHead(node *&head, int num)
{
    node *temp = new node(num);
    temp->next = head;
    head = temp;
}
// Tail insertion
void insertTail(node *&tail, int num)
{
    node *temp = new node(num);
    tail->next = temp;
    tail = tail->next;
}
// Middle Insertion
void insertMiddle(node *&tail, node *&head, int position, int num)
{
    node *temp = head;
    int count = 1;

    if (position == 1)
    {
        insertHead(head, num);
        return;
    }
    if (tail->next == NULL)
    {
        insertTail(tail, num);
        return;
    }

    while (count < position - 1)
    {
        temp = temp->next;
    }
    node *insertMiddleNode = new node(num);
    insertMiddleNode->next = temp->next;
    temp->next = insertMiddleNode;
}
// Deletion Of Node
void deleteNode(int position, node *&head)
{
    if (position == 1)
    {
        node *temp = head;
        head = head->next;
        temp->next = NULL;
        delete temp;
    }
    else
    {
        node *current = head;
        int cnt = 1;
        while (cnt < position)
        {
            current = current->next;
            cnt++;
        }

        current->next = NULL;
        delete current;
    }
}
// Print or Traverse Nodes
void print(node *&head)
{
    node *temp = head;

    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main()
{

    node *node1 = new node(58);
    // node *node2 = new node(72);

    // cout << node1->data << endl;
    // cout << node1->next << endl;
    // cout << node2->data << endl;
    // cout << node2->next << endl;

    node *head = node1;
    node *tail = node1;

    print(head);
    insertTail(tail, 68);
    // insertHead(tail, 68);
    print(head);
    insertTail(tail, 78);
    // insertHead(tail, 78);
    print(head);
    insertMiddle(tail, head, 4, 45);
    print(head);

    deleteNode(4, head);
    cout << "Head " << head->data << endl;
    cout << "tail ``" << tail->data << endl;

    return 0;
}
